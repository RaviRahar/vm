#!/bin/bash

# requirements:
#   edk2-ovmf
#   qemu-main
#   kvm : for kvm support, enable it too
#   samba
#   cifs-utils
#   openssh

# naming-scheme:
# function names startin with _ are helping functions ( not used in main() ).
# local variables are named in snake case
# array namerefs use ___ to avoid cyclic reference

_get_dir_vm()
{
  declare -r dir_type="$1"
  case "$dir_type" in
    ovmf)
      echo "/usr/share/edk2-ovmf/x64"
      ;;
    iso)
      echo "${HOME}/Downloads/isos"
      ;;
    config)
      echo "${HOME}/.config/vm"
      ;;
    image)
      echo "${HOME}/.config/vm/images"
      ;;
    backup)
      echo "${HOME}/.config/vm/backup"
      ;;
    ovmf_var)
      echo "${HOME}/.config/vm/ovmf"
      ;;
    samba)
      echo "${HOME}/shared"
      ;;
  esac
}

################################################################
##
## Bash-Completion
##
################################################################

_completion_handler()
{
  declare -r vm_config_dir=$(_get_dir_vm "config")
  declare -r vm_image_dir=$(_get_dir_vm "image")
  declare -r vm_backup_dir=$(_get_dir_vm "backup")
  declare -r vm_samba_shared_dir=$(_get_dir_vm "samba")
  declare -r vm_ovmf_var_for_images_dir=$(_get_dir_vm "ovmf_var")
  declare -r vm_iso_dir=$(_get_dir_vm "iso")
  declare -r vm_ovmf_dir=$(_get_dir_vm "ovmf")

  local cur prev sec_prev
  if type -t _init_completion > /dev/null; then
    _init_completion -n = || return
  else
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD - 1]}"
    sec_prev="${COMP_WORDS[COMP_CWORD - 2]}"
  fi

  # list of options for each command
  local initialize_options=()
  for file in "$vm_iso_dir/"*; do
    if [[ -f "$file" ]]; then
      initialize_options+=("$(basename "$file")")
    fi
  done

  local run_vm_options=()
  for file in "$vm_image_dir/"*; do
    if [[ -f "$file" ]]; then
      run_vm_options+=("$(basename "$file")")
    fi
  done

  local backup_vm_options=("${run_vm_options[@]}")
  local remove_vm_options=("${run_vm_options[@]}")
  local config_vm_options=("${run_vm_options[@]}")

  local active_vm_options=()
  while read -r image_name_pid; do
    active_vm_options+=("$image_name_pid")
  done < <(pgrep -a qemu | sed "s|^\([0-9]*\)\s\(.*\)${vm_image_dir}/\(.*\)|\3:\1|;t;d")

  local kill_vm_options=()
  while read -r image_name; do
    kill_vm_options+=("$image_name")
  done < <(pgrep -a qemu | sed "s|^\([0-9]*\)\s\(.*\)${vm_image_dir}/\(.*\)|\3|;t;d")

  local kill_vm_pid_options=()
  while read -r pid; do
    kill_vm_pid_options+=("$pid")
  done < <(pgrep -a qemu | sed "s|^\([0-9]*\)\s\(.*\)${vm_image_dir}/\(.*\)|\1|;t;d")

  # complete options for vm command
  case "$prev" in
    vm | ./vm)
      mapfile -t COMPREPLY < <(compgen -W "--create_image --initialize --setup --run --remove --backup --print --ssh --vnc --smb-follow-symlink --kill --add_config --make_dirs --install --help" -- "$cur")
      ;;
    -c | --create_image | -i | --initialize | -n | --new | --setup)
      mapfile -t COMPREPLY < <(compgen -W "${initialize_options[*]}" -- "$cur")
      ;;
    -s | --start | --run)
      mapfile -t COMPREPLY < <(compgen -W "${run_vm_options[*]}" -- "$cur")
      ;;
    -r | --remove)
      mapfile -t COMPREPLY < <(compgen -W "${remove_vm_options[*]}" -- "$cur")
      ;;
    -p | --print | --list)
      mapfile -t COMPREPLY < <(compgen -W "--active --all" -- "$cur")
      ;;
    -b | --backup)
      mapfile -t COMPREPLY < <(compgen -W "--config ${backup_vm_options[*]}" -- "$cur")
      ;;
    -l | --ssh | --login)
      mapfile -t COMPREPLY < <(compgen -W "${active_vm_options[*]}" -- "$cur")
      ;;
    -v | --vnc)
      mapfile -t COMPREPLY < <(compgen -W "${active_vm_options[*]}" -- "$cur")
      ;;
    -f | --smb_follow_symlinks)
      mapfile -t COMPREPLY < <(compgen -W "" -- "$cur")
      ;;
    -k | --kill)
      mapfile -t COMPREPLY < <(compgen -W "--all ${kill_vm_options[*]}" -- "$cur")
      ;;
    -m | --make_dirs)
      mapfile -t COMPREPLY < <(compgen -W "--remove" -- "$cur")
      ;;
    -j | --install)
      mapfile -t COMPREPLY < <(compgen -W "--uninstall" -- "$cur")
      ;;
    -z | --add_config)
      mapfile -t COMPREPLY < <(compgen -W "${config_vm_options[*]}" -- "$cur")
      ;;
    -h | --help)
      mapfile -t COMPREPLY < <(compgen -W "" -- "$cur")
      ;;
    --pid)
      case "$sec_prev" in
        -k | --kill)
          mapfile -t COMPREPLY < <(compgen -W "${kill_vm_pid_options[*]}" -- "$cur")
          ;;
      esac
      ;;
    *) ;;

  esac
}

# just source completion function when script is sourced
if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
  complete -F _completion_handler ./vm
  complete -F _completion_handler vm
  return 0
fi

setup_bash_completion_vm()
{
  {
    typeset -f _get_dir_vm
    typeset -f _completion_handler
    echo "complete -F _completion_handler vm"
  } >> /etc/bash_completion.d/vm.bash_completion

  echo "modified file: /etc/bash_completion.d/vm.bash_completion"
}

################################################################
##
## Script
##
################################################################

make_dirs_vm()
{
  declare -r remove_dirs="$1"

  declare -r vm_config_dir=$(_get_dir_vm "config")
  declare -r vm_image_dir=$(_get_dir_vm "image")
  declare -r vm_backup_dir=$(_get_dir_vm "backup")
  declare -r vm_ovmf_var_for_images_dir=$(_get_dir_vm "ovmf_var")
  declare -r vm_samba_shared_dir=$(_get_dir_vm "samba")

  if [[ -z "$remove_dirs" ]]; then
    mkdir -pv "$vm_config_dir" "$vm_backup_dir" "$vm_image_dir"
    mkdir -pv "$vm_samba_shared_dir" "$vm_ovmf_var_for_images_dir"
    mkdir -pv "$vm_backup_dir"/images "$vm_backup_dir"/ovmf
    touch "${vm_config_dir}/config.vm"
  else
    rm -rv "$vm_config_dir" "$vm_backup_dir" "$vm_image_dir"
    rm -rv "$vm_samba_shared_dir" "$vm_ovmf_var_for_images_dir"
  fi
}

install_vm()
{
  declare -r uninstall="$1"
  if [[ -z "$remove_dirs" ]]; then
    make_dirs_vm
    mkdir -pv "$HOME/.local/scripts"
    export PATH="${PATH}:${HOME}/.local/scripts"

    # shellcheck source=/dev/null
    source "${HOME}/.local/scripts/vm"

    {
      echo "export PATH=\"\$PATH\":\"\$HOME\"/.local/scripts"
      echo "source \"\$HOME\"/.local/scripts/vm"
    } >> "${HOME}/.bashrc"
  else
    rm -rv "$0"
    sed -i "|^source.*/.local/scripts/vm|d"
  fi
}

_trim_and_lower_case_vm()
{
  local string
  string="$1"
  string=$(echo -e "${string}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
  string=${string,,}
  echo "$string"
}

_read_config_vm()
{
  declare -n ____vm_image_config="$1"
  declare -r do_not_return_defaults="$2"

  if [[ -n "${____vm_image_config[vm_config_path]}" ]]; then
    declare -r vm_config_path="${____vm_image_config[vm_config_path]}"
  else
    declare -r vm_config_path="$(_get_dir_vm "config")/config.vm"
  fi

  declare -i image_config_found=0

  while read -r line; do

    config_setting[idx]=$(echo -e "${config_setting[idx]}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
    config_setting[idx]=${config_setting[idx],,}

    local edited_line
    edited_line=$(_trim_and_lower_case_vm "$line")

    if [[ "$edited_line" == "[${____vm_image_config[image_name]}]" ]]; then
      image_config_found=1
    elif [[ "$image_config_found" -eq 1 && "$edited_line" =~ ^"[".*"]"$ ]]; then
      break
    fi

    if [[ $image_config_found -eq 1 ]]; then

      IFS="=" read -ra config_setting <<< "$line"

      for ((idx = 0; idx < ${#config_setting[@]}; idx++)); do
        config_setting[idx]=$(_trim_and_lower_case_vm "${config_setting[idx]}")
      done

      if [[ ${config_setting[0]} == "boot_type" && -z ${____vm_image_config[boot_type]} ]]; then
        ____vm_image_config[boot_type]="${config_setting[1]}"
      fi

      if [[ ${config_setting[0]} == "ssh_port" && -z ${____vm_image_config[ssh_port]} ]]; then
        ____vm_image_config[ssh_port]="${config_setting[1]}"
      fi

      if [[ ${config_setting[0]} == "vnc_port" && -z ${____vm_image_config[vnc_port]} ]]; then
        ____vm_image_config[vnc_port]="${config_setting[1]}"
      fi

    fi

  done < "${vm_config_path}"

  if [[ -z "$do_not_return_defaults" ]]; then
    if [[ -z "${____vm_image_config[boot_type]}" ]]; then
      echo "$(basename "$0"): config: boot_type for ${____vm_image_config[image_name]} not found. using efi"
      ____vm_image_config[boot_type]="efi"
    fi

    if [[ -z "${____vm_image_config[ssh_port]}" ]]; then
      echo "$(basename "$0"): config: ssh_port for ${____vm_image_config[image_name]} not found. using 2222"
      ____vm_image_config[ssh_port]="2222"
    fi

    if [[ -z "${____vm_image_config[vnc_port]}" ]]; then
      echo "$(basename "$0"): config: vnc_port for ${____vm_image_config[image_name]} not found. using 5900"
      ____vm_image_config[vnc_port]="5900"
    fi
  fi

  if [[ -n "$3" ]]; then
    echo "${____vm_image_config[@]}"
  fi

  [[ $image_config_found -eq 1 ]] && return 0 || return 1
}

# already existing values in config remain same and cannot be changed
# delete and write again to update those or do it manually
_write_config_vm()
{
  declare -n ___vm_image_config="$1"
  declare -r overwrite_existing="$2"

  if [[ -n "${___vm_image_config[vm_config_path]}" ]]; then
    declare -r vm_config_path="${___vm_image_config[vm_config_path]}"
  else
    declare -r vm_config_path="$(_get_dir_vm "config")/config.vm"
  fi

  if _read_config_vm ___vm_image_config "do_not_return_defaults" &> /dev/null; then
    if [[ -n "$overwrite_existing" ]]; then
      _delete_config_vm "${___vm_image_config[image_name]}"
    else
      return 1
    fi
  fi

  if [[ -z "$overwrite_existing" ]]; then
    if [[ -z "${___vm_image_config[boot_type]}" ]]; then
      ___vm_image_config[boot_type]="efi"
    fi

    if [[ -z "${___vm_image_config[ssh_port]}" ]]; then
      ___vm_image_config[ssh_port]="2222"
    fi

    if [[ -z "${___vm_image_config[vnc_port]}" ]]; then
      ___vm_image_config[vnc_port]="5900"
    fi
  fi

  cat >> "${vm_config_path}" << EOF

[${___vm_image_config[image_name]}]
boot_type=${___vm_image_config[boot_type]}
ssh_port=${___vm_image_config[ssh_port]}
vnc_port=${___vm_image_config[vnc_port]}
EOF

  return 0
}

_delete_config_vm()
{
  declare -r image_name="$1"
  if [[ -n "$2" ]]; then
    declare -r vm_config_path="$2"
  else
    declare -r vm_config_path="$(_get_dir_vm "config")/config.vm"
  fi

  declare -i image_config_found=0
  declare -i image_config_start=0
  declare -i image_config_end=0

  while read -r line; do

    local edited_line
    edited_line=$(_trim_and_lower_case_vm "$line")

    if [[ "$edited_line" == "[$image_name]" ]]; then
      image_config_found=1
      image_config_start=$((image_config_end + 1))
    elif [[ "$image_config_found" -eq 1 && "$edited_line" =~ ^"[".*"]"$ ]]; then
      break
    fi

    image_config_end+=1

  done < "${vm_config_path}"

  if [[ $image_config_found -eq 1 ]]; then
    sed -i "${image_config_start},${image_config_end}d" "${vm_config_path}"
    return 0
  fi

  return 1
}

create_image_vm()
{
  declare -r image_name="$1"
  declare -r vm_image_dir=$(_get_dir_vm "image")

  qemu-img create -f qcow2 -o nocow=on "$vm_image_dir"/"$image_name" 20G
  echo "created image: ${vm_image_dir}/${image_name}"
}

initialize_vm()
{
  declare -n __vm_image_config="$1"

  declare -r iso_name="${__vm_image_config[iso_name]}"
  declare -r image_name="${__vm_image_config[image_name]}"
  declare -r boot_type="${__vm_image_config[boot_type]}"
  declare -ri ssh_port="${__vm_image_config[ssh_port]}"
  declare -ri vnc_port="${__vm_image_config[vnc_port]}"

  if [[ -z "$image_name" || -z "$iso_name" ]]; then
    echo "$(basename "$0"): image_name or --iso_name missing"
    return 1
  fi

  declare -r vm_image_dir=$(_get_dir_vm "image")
  declare -r vm_iso_dir=$(_get_dir_vm "iso")
  declare -r vm_ovmf_dir=$(_get_dir_vm "ovmf")
  declare -r vm_ovmf_var_for_images_dir=$(_get_dir_vm "ovmf_var")
  declare -r vm_samba_shared_dir=$(_get_dir_vm "samba")

  _write_config_vm __vm_image_config

  # TODO
  # declare -ri ram="${__vm_image_config[ram]}"
  # declare -ri cores="${__vm_image_config[cores]}"
  # declare -ri cpus="${__vm_image_config[cpus]}"

  if [[ "legacy" == $(_trim_and_lower_case_vm "$boot_type") ]]; then
    qemu-system-x86_64 -enable-kvm -cdrom "$vm_iso_dir"/"$iso_name" -boot order=d -drive file="$vm_image_dir"/"$image_name" -vnc :$((vnc_port - 5900)) -nic user,hostfwd=tcp::"${ssh_port}"-:22,smb="$vm_samba_shared_dir" -daemonize -m 4G -smp cores=4,cpus=4
  else
    cp -i "$vm_ovmf_dir"/OVMF_CODE.fd "$vm_ovmf_var_for_images_dir"/"$image_name".fd
    qemu-system-x86_64 -enable-kvm -cdrom "${vm_iso_dir}/${iso_name}" -boot order=d -drive file="$vm_image_dir"/"$image_name" -vnc :$((vnc_port - 5900)) -nic user,hostfwd=tcp::"${ssh_port}"-:22,smb="$vm_samba_shared_dir" -daemonize -m 4G -smp cores=4,cpus=4 -drive if=pflash,format=raw,unit=0,readonly=on,file="$vm_ovmf_dir"/OVMF_CODE.fd -drive if=pflash,format=raw,unit=1,file="$vm_ovmf_var_for_images_dir"/"$image_name".fd
  fi

  echo "initialized image: ${vm_image_dir}/${image_name}"
}

setup_vm()
{
  declare -n _vm_image_config="$1"

  declare -r vm_image_dir=$(_get_dir_vm "image")
  declare -r image_name="${_vm_image_config[image_name]}"

  create_image_vm "$image_name"
  initialize_vm _vm_image_config
  echo "$(basename "$0"): setup complete for image: ${vm_image_dir}/${image_name}"
}

remove_vm()
{
  declare -r image_name="$1"
  declare -r remove_backup="$2"

  declare -r vm_config_dir=$(_get_dir_vm "config")
  declare -r vm_image_dir=$(_get_dir_vm "image")

  rm -rv "${vm_image_dir}/${image_name:?}"
  rm -rv "${vm_ovmf_var_for_images_dir}/${image_name:?}.fd"
  _delete_config_vm "$image_name"

  if [[ -n "$remove_backup" ]]; then
    declare -r vm_backup_dir=$(_get_dir_vm "backup")
    rm -rv "${vm_backup_dir}/${image_name:?}"
    _delete_config_vm "$image_name" "$vm_backup_dir/config.vm"
  fi
}

backup_vm()
{
  declare -r image_name="$1"

  declare -r vm_image_dir=$(_get_dir_vm "image")
  declare -r vm_config_dir=$(_get_dir_vm "config")
  declare -r vm_backup_dir=$(_get_dir_vm "backup")
  declare -r vm_ovmf_var_for_images_dir=$(_get_dir_vm "ovmf_var")

  cp -i "$vm_image_dir"/"$image_name" "$vm_backup_dir"/images/"$image_name"
  cp -i "$vm_ovmf_var_for_images_dir"/"$image_name".fd "$vm_backup_dir"/ovmf/"$image_name".fd
  cp "${vm_config_dir}/config.vm" "${vm_backup_dir}/config.vm"

  echo "backed up image: ${vm_image_dir}/${image_name}"
}

backup_config_vm()
{
  declare -r vm_config_dir=$(_get_dir_vm "config")
  declare -r vm_backup_dir=$(_get_dir_vm "backup")

  cp "${vm_config_dir}/config.vm" "${vm_backup_dir}/config.vm"
  echo "backed up config: ${vm_config_dir}/config.vm to ${vm_backup_dir}/config.vm"
}

run_vm()
{
  declare -r image_name="$1"

  declare -r vm_config_dir=$(_get_dir_vm "config")
  declare -r vm_image_dir=$(_get_dir_vm "image")
  declare -r vm_ovmf_dir=$(_get_dir_vm "ovmf")
  declare -r vm_ovmf_var_for_images_dir=$(_get_dir_vm "ovmf_var")
  declare -r vm_samba_shared_dir=$(_get_dir_vm "samba")

  declare -A ___vm_image_config
  ___vm_image_config[image_name]="$image_name"
  _read_config_vm ___vm_image_config

  declare -r boot_type=${___vm_image_config[boot_type]}
  declare -i ssh_port=${___vm_image_config[ssh_port]}
  declare -i vnc_port=${___vm_image_config[vnc_port]}

  # TODO
  # declare -ri ram="${__vm_image_config[ram]}"
  # declare -ri cores="${__vm_image_config[cores]}"
  # declare -ri cpus="${__vm_image_config[cpus]}"

  if [[ "$boot_type" == "legacy" ]]; then
    echo "$(basename "$0"): running image: ${vm_image_dir}/${image_name}"
    qemu-system-x86_64 -enable-kvm -vnc :$((vnc_port - 5900)) -nic user,hostfwd=tcp::${ssh_port}-:22,smb="$vm_samba_shared_dir" -daemonize -m 4G -smp cores=4,cpus=4 "$vm_image_dir"/"$image_name"
  elif [[ "$boot_type" == "efi" ]]; then
    echo "$(basename "$0"): running image: ${vm_image_dir}/${image_name}"
    qemu-system-x86_64 -enable-kvm -vnc :$((vnc_port - 5900)) -nic user,hostfwd=tcp::${ssh_port}-:22,smb="$vm_samba_shared_dir" -daemonize -m 4G -smp cores=4,cpus=4 "$vm_image_dir"/"$image_name" -drive if=pflash,format=raw,readonly=on,file="$vm_ovmf_dir"/OVMF_CODE.fd -drive if=pflash,format=raw,file="$vm_ovmf_var_for_images_dir"/"$image_name".fd
  else
    echo "config: error in boot_type for ${image_name}"
  fi
}

# enable symlink support for shared folder
qemu_smb_support_symlink_all_vm()
{
  declare -ra pids=$(pgrep -a smbd | sed "s|^\([0-9]*\)\s/usr/bin/smbd\(.*\)|\1|;t;d")
  local -a confs
  mapfile -t confs < <(pgrep -a smbd | sed "s|^\([0-9]*\)\s/usr/bin/smbd.*\(/tmp/qemu-smb.*$\)\(.*\)|\2|;t;d")

  declare -r smb_config_global="allow insecure wide links = yes"
  declare -r smb_config_qemu="follow symlinks = yes\nwide links = yes\nacl allow execute always = yes"

  declare -i global_config_added=0
  declare -i qemu_config_added=0
  declare -i global_exists=1
  declare -i qemu_exists=1

  declare smb_conf_path

  for ((i = 0; i < ${#pids[@]}; i++)); do
    smb_conf_path="${confs[i]}"
    if [[ -f smb_conf_path ]]; then
      global_exists=$(grep -cx "$smb_config_global" "$smb_conf_path")
      if [ "$global_exists" -eq 0 ]; then
        sed -i "/\[global\]/a ${smb_config_global}" "$smb_conf_path"
        global_config_added=1
      fi

      qemu_exists=$(grep -zPcx "$smb_config_qemu" "$smb_conf_path")
      if [ "$qemu_exists" -eq 0 ]; then
        sed -i "/\[qemu\]/a ${smb_config_qemu}" "$smb_conf_path"
        qemu_config_added=1
      fi

      if [ "$global_config_added" -eq 1 ] || [ "$qemu_config_added" -eq 1 ]; then
        smbcontrol --configfile="${smb_conf_path}" "${pids[i]}" reload-config
      fi

      echo "modified file: ${smb_conf_path}"

      global_config_added=0
      qemu_config_added=0
    fi
  done
}

list_active_vm()
{
  declare -r vm_image_dir=$(_get_dir_vm "image")
  pgrep -a qemu | sed "s|^\([0-9]*\)\s\(.*\)${vm_image_dir}/\(.*\)|\1 \3|;t;d"
}

list_all_vm()
{
  declare -r vm_image_dir=$(_get_dir_vm "image")

  for file in "${vm_image_dir}/"*; do
    if [[ -f "$file" ]]; then
      basename "$file"
    fi
  done
}

kill_pid_vm()
{
  declare -r pid="$1"
  kill -9 "$pid"
  echo "killed vm: ${pid}"
}

kill_image_name_vm()
{
  declare -r image_name="$1"
  declare pid
  declare -r vm_image_dir=$(_get_dir_vm "image")
  pid=$(pgrep -a qemu | sed "s|^\([0-9]*\)\s\(.*\)${vm_image_dir}/${image_name}\(.*\)|\1|;t;d")
  kill -9 "$pid"
  echo "killed vm: ${image_name}"
}

kill_all_vm()
{
  killall qemu-system-x86_64
  echo "killed all active qemu vms"
}

ssh_vm()
{
  declare -r image_name="$1"

  declare user_name
  [[ -n $2 ]] && user_name=$2 || user_name=$USER

  declare -A ___vm_image_config
  ___vm_image_config[image_name]="$image_name"
  _read_config_vm ___vm_image_config

  declare -i ssh_port=${___vm_image_config[ssh_port]}

  ssh "$user_name"@localhost -p "$ssh_port"
}

vnc_vm()
{
  declare -r image_name="$1"

  declare -r vm_config_dir=$(_get_dir_vm "config")

  declare -A ___vm_image_config
  ___vm_image_config[image_name]="$image_name"
  _read_config_vm ___vm_image_config

  declare -i vnc_port=${___vm_image_config[vnc_port]}
  vncviewer :"$vnc_port"
}

add_config_vm()
{
  declare -n __vm_image_config="$1"
  declare -r overwrite="$2"

  declare -r image_name="${__vm_image_config[image_name]}"

  if [[ -z "$image_name" ]]; then
    echo "$(basename "$0"): image_name missing"
    return 1
  fi

  if [[ -z "$overwrite" ]]; then
    if _write_config_vm __vm_image_config; then
      echo "$(basename "$0"): config for $image_name written successfully"
    fi
  else
    if _write_config_vm __vm_image_config "overwrite"; then
      echo "$(basename "$0"): config for $image_name over-written successfully"
    fi
  fi
}

take_config_args_vm()
{
  declare -n _vm_image_config="$1"

  for ((i = 3; i <= "$#"; i++)); do
    next=$((i + 1))
    case "${!i}" in
      -i | --iso_name)
        _vm_image_config[iso_name]="${!next}"
        ;;
      -b | --boot_type)
        _vm_image_config[boot_type]="${!next}"
        ;;
      -s | --ssh_port)
        _vm_image_config[ssh_port]="${!next}"
        ;;
      -v | --vnc_port)
        _vm_image_config[vnc_port]="${!next}"
        ;;
      *) echo "$(basename "$0"): config: arg ${!i} not supported" ;;
    esac
  done
}

help_vm()
{
  help="
Usage:

      -c|--create_image: create new vm image named {{ image_name }}

          $(basename "$0") -c image_name
        
      -i|--initialize: initialize vm image named {{ image_name }} with {{ iso_name }}

          $(basename "$0") -i iso_name image_name boot_type ssh_port vnc_port

          necessary: iso_name, image_name
          defaults:
              boot-type : efi
              ssh-port  : 2222
              vnc-port  : 5900

      -n|--new|--setup: create and initialize vm image named {{ image_name }} with {{ iso_name }}

          $(basename "$0") -n iso_name image_name boot_type ssh_port vnc_port

          necessary: iso_name, image_name
          defaults:
              boot-type : efi
              ssh-port  : 2222
              vnc-port  : 5900

      -s|--start|--run: run image provided in {{ image_name }}

          $(basename "$0") -s image_name

      -r|--remove: backup vm image or config

          remove vm image:

          $(basename "$0") -r image_name

          remove vm image and backup too:

          $(basename "$0") -r -a image_name

      -p|--print|--list: list active vm images or all vm images

          list active vm images:

            $(basename "$0") -p

          list all vm images:

            $(basename "$0") -p -a

      -b|--backup: backup vm image or config

          $(basename "$0") -b image_name
          $(basename "$0") -b -c

      -l|--ssh|--login: ssh into currently running image

          $(basename "$0") -l image_name user_name

          defaluts:
            user_name: $USER

      -v|--vnc: attach tiger-vnc client to vm

          $(basename "$0") -v image_name

      -f|--smb_follow_symlinks: allow following symlinks in shared directory

          $(basename "$0") -l

          note: can be a security risk

      -k|--kill: kill vm with given {{ image_name }} {{ pid }} or all the vms

          $(basename "$0") -k image_name
          $(basename "$0") -k -p pid
          $(basename "$0") -k -a

      -z|--add_config: add config for vm image already existing

          $(basename "$0") -z image_name boot_type ssh_port vnc_port

          defaults:
              boot-type : efi
              ssh-port  : 2222
              vnc-port  : 5900

      -m|--make_dirs: make or remove directories required for this script

          make directories:

          $(basename "$0") -m

          remove directories:

          $(basename "$0") -m -r

      -j|--install: install or uninstall script

          install:

          $(basename "$0") -j

          uninstall:

          $(basename "$0") -j -r

      -u|--bash_completion: setup bash completion for this script

          $(basename "$0") -u

      -h|--help: print this help page

defaults for dirs (change in script):

  ovmf file: /usr/share/edk2-ovmf/x64
  isos of os(es): ${HOME}/Downloads/isos

  config directory for vms: ${HOME}/.config/vm
  config file for vms: ${HOME}/.config/vm/config.vm
  images of vms: ${HOME}/.config/vm/images
  ovmf vars for each vm: ${HOME}/.config/vm/ovmf
  backup folder: ${HOME}/.config/vm/backup

  samba share directory: ${HOME}/shared
"
  echo "$help"
}

main()
{
  case "$1" in
    -c | --create_image)
      declare -r image_name="$3"
      create_image_vm "$image_name"
      ;;
    -i | --initialize)
      declare -r iso_name="$2"
      declare -r image_name="$3"
      declare -r boot_type="$4"
      declare -r ssh_port="$5"
      declare -r vnc_port="$6"
      initialize_vm "$iso_name" "$image_name" "$boot_type" "$ssh_port" "$vnc_port"
      ;;
    -n | --new | --setup)
      declare -r iso_name="$2"
      declare -r image_name="$3"
      declare -r boot_type="$4"
      declare -r ssh_port="$5"
      declare -r vnc_port="$6"
      setup_vm "$iso_name" "$image_name" "$boot_type" "$ssh_port" "$vnc_port"
      ;;
    -s | --start | --run)
      declare -r image_name=$2
      run_vm "$image_name"
      ;;
    -r | --remove)
      declare -r image_name=$2
      remove_vm "$image_name"
      if [[ "$2" = "-a" || "$2" = "--all" ]]; then
        remove_vm "$image_name" "backup_too"
      fi
      ;;
    -b | --backup)
      if [[ "$2" == "-c" || "$2" == "--config" ]]; then
        backup_config_vm
      else
        declare -r image_name=$2
        backup_vm "$image_name"
      fi
      ;;
    -p | --print | --list)
      if [[ "$2" = "-a" || "$2" = "--all" ]]; then
        list_all_vm
      elif [[ "$2" = "--active" || -z $2 ]]; then
        list_active_vm
      fi
      ;;
    -l | --login | --ssh)
      declare -r image_name=$2
      declare -r user_name=$3
      ssh_vm "$image_name" "$user_name"
      ;;
    -v | --vnc)
      declare -r image_name=$2
      vnc_vm "$image_name"
      ;;
    -f | --smb_follow_symlinks)
      qemu_smb_support_symlink_all_vm
      ;;
    -k | --kill)
      if [[ "$2" == "-a" || "$2" == "--all" ]]; then
        kill_all_vm
      elif [[ "$2" == "-p" || "$2" == "--pid" ]]; then
        declare -r pid=$3
        kill_pid_vm "$pid"
      else
        declare -r image_name=$2
        kill_image_name_vm "$image_name"
      fi
      ;;
    -z | --add_config)
      declare -r image_name=$2
      declare -r boot_type=$3
      declare -r ssh_port=$4
      declare -r vnc_port=$5

      add_config_vm "$image_name" "$boot_type" "$ssh_port" "$vnc_port"
      ;;
    -u | --bash_completion)
      setup_bash_completion_vm
      ;;
    -m | --make_dirs)
      declare -r remove_dirs=$2
      if [[ "$remove_dirs" == "-r" || "$remove_dirs" == "--remove" ]]; then
        make_dirs_vm "-r"
      else
        make_dirs_vm
      fi
      ;;
    -j | --install)
      declare -r uninstall=$2
      if [[ "$uninstall" == "-r" || "$uninstall" == "--remove" ]]; then
        install_vm "-r"
      else
        install_vm
      fi
      ;;
    -h | --help)
      help_vm
      ;;
    *) ;;
  esac
}

main "$@"
